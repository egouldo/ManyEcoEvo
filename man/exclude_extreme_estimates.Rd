% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/exclude_extreme_estimates.R
\name{exclude_extreme_estimates}
\alias{exclude_extreme_estimates}
\title{Exclude extreme estimates above a threshold parameter sd}
\usage{
exclude_extreme_estimates(
  data,
  outcome_variable,
  outcome_SE,
  sd_threshold = numeric(1L),
  param_table,
  .fn = ...,
  ...
)
}
\arguments{
\item{data}{A dataframe of analyst estimates}

\item{outcome_variable}{the name of the variable in \code{data} containing the analyst estimates}

\item{outcome_SE}{variable in \code{data} containing analyst SE estimates}

\item{sd_threshold}{A numeric threshold multiplyer see details}

\item{param_table}{A dataframe containing population parameters \code{mean} and \code{sd} for each \code{variable} in a given \code{dataset}}

\item{.fn}{An optional function that will transform parameter estimates to the same scale as \code{outcome_variable} in \code{data}}

\item{...}{Arguments supplied to \code{.fn}}
}
\value{
A dataframe of analyst estimates with extreme estimates excluded
}
\description{
Exclude extreme estimates above a threshold parameter sd
}
\details{
This function is used to exclude extreme estimates from a dataset. The function
calculates a threshold for exclusion based on the mean and standard deviation of
the population parameter estimates in \code{param_table}. The threshold is calculated
as the mean of the population parameter plus \code{sd_threshold} times the standard
deviation of the population parameter. Estimates in \code{data} that are greater than
this threshold are excluded from the output.

If the user chooses to supply \code{.fn} and \code{...} arguments, the function will transform
the population parameter estimates in \code{param_table} to the same scale as the
\code{outcome_variable} in \code{data} using \code{.fn}, before calculating the threshold for exclusion.
}
\examples{
# example code
data <-   ManyEcoEvo_yi \%>\% 
mutate(data = 
         map_if(data, 
                ~ filter(.x, 
                         stringr::str_detect(response_variable_name, 
                                             "average.proportion.of.plots.containing",
                                             negate = TRUE)),
                .p = dataset == "eucalyptus")) \%>\%   
  mutate(
    diversity_data =
      map2(
        .x = diversity_data,
        .y = data,
        .f = ~ semi_join(.x, .y, join_by(id_col)) \%>\% 
          distinct()
      )
  ) \%>\% 
  prepare_response_variables(
    estimate_type = "yi",
    param_table = 
      ManyEcoEvo:::analysis_data_param_tables, 
    dataset_standardise = "blue tit",
    dataset_log_transform = "eucalyptus") \%>\%
  generate_yi_subsets() \%>\% #TODO: must be run after prepare_response_variables??
  apply_VZ_exclusions(
    VZ_colname = list("eucalyptus" = "se_log", 
                      "blue tit" = "VZ"), 
    VZ_cutoff = 3) \%>\% 
  filter(dataset == "eucalyptus", estimate_type == "y25")  \%>\% 
  pluck("data", 1)
sd_threshold = 3
param_table <- ManyEcoEvo:::analysis_data_param_tables
exclude_extreme_estimates(data, "mean_log", "se_log", 3, param_table, log_transform, estimate = mean, std.error = sd)
}
